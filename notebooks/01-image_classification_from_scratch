{"cells":[{"cell_type":"markdown","metadata":{"id":"1Iw74HWLAbiv"},"source":["# Image classification from scratch\n","\n","**Author:** [fchollet](https://twitter.com/fchollet)<br>\n","**Date created:** 2020/04/27<br>\n","**Last modified:** 2020/04/28<br>\n","**Description:** Training an image classifier from scratch on the Kaggle Cats vs Dogs dataset."]},{"cell_type":"markdown","metadata":{"id":"LaFgLF-1Abiz"},"source":["## Introduction\n","\n","This example shows how to do image classification from scratch, starting from JPEG\n","image files on disk, without leveraging pre-trained weights or a pre-made Keras\n","Application model. We demonstrate the workflow on the Kaggle Cats vs Dogs binary\n"," classification dataset.\n","\n","We use the `image_dataset_from_directory` utility to generate the datasets, and\n","we use Keras image preprocessing layers for image standardization and data augmentation.\n"]},{"cell_type":"markdown","metadata":{"id":"V8ouv05lAbi0"},"source":["## Setup\n"]},{"cell_type":"code","source":["try:\n","  from google.colab import drive\n","  IN_COLAB=True\n","except:\n","  IN_COLAB=False\n","\n","if IN_COLAB:\n","  print(\"We're running Colab\")\n","\n","\n","if IN_COLAB:\n","  # Mount the Google Drive at mount\n","  mount='/content/drive'\n","  print(\"Colab: mounting Google drive on \", mount)\n","\n","  drive.mount(mount, force_remount=True)\n","# Switch to the directory on the Google Drive that you want to use\n","  import os\n","  drive_root = \"/content/drive/MyDrive/colab_notebooks/AWS_project/cats_dogs_classifier\"\n","\n","  # Create drive_root if it doesn't exist\n","  create_drive_root = True\n","  if create_drive_root:\n","    print(\"\\nColab: making sure \", drive_root, \" exists.\")\n","    os.makedirs(drive_root, exist_ok=True)\n","\n","  # Change to the directory\n","  print(\"\\nColab: Changing directory to \", drive_root)\n","  %cd $drive_root"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"8R4QbxCjoej4","executionInfo":{"status":"ok","timestamp":1649756010166,"user_tz":-120,"elapsed":17890,"user":{"displayName":"Tobías Chavarría","userId":"09737607649737780026"}},"outputId":"eaeaea6b-bfb4-4aab-d0f2-a94656fa911f"},"execution_count":1,"outputs":[{"output_type":"stream","name":"stdout","text":["We're running Colab\n","Colab: mounting Google drive on  /content/drive\n","Mounted at /content/drive\n","\n","Colab: making sure  /content/drive/MyDrive/colab_notebooks/AWS_project/cats_dogs_classifier  exists.\n","\n","Colab: Changing directory to  /content/drive/MyDrive/colab_notebooks/AWS_project/cats_dogs_classifier\n","/content/drive/MyDrive/colab_notebooks/AWS_project/cats_dogs_classifier\n"]}]},{"cell_type":"markdown","metadata":{"id":"maN2huXnAbi9"},"source":["## Run inference on new data\n","\n","Note that data augmentation and dropout are inactive at inference time.\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"LpN1SbMjAbi9"},"outputs":[],"source":["img = keras.preprocessing.image.load_img(\n","    \"PetImages/Cat/6779.jpg\", target_size=image_size\n",")\n","img_array = keras.preprocessing.image.img_to_array(img)\n","img_array = tf.expand_dims(img_array, 0)  # Create batch axis\n","\n","predictions = model.predict(img_array)\n","score = predictions[0]\n","print(\n","    \"This image is %.2f percent cat and %.2f percent dog.\"\n","    % (100 * (1 - score), 100 * score)\n",")\n"]},{"cell_type":"markdown","source":["Set up: Cookiecutter"],"metadata":{"id":"0wLnxO5Yc9Gw"}},{"cell_type":"code","source":["#!pip install cookiecutter"],"metadata":{"id":"k87iCwqMc8qa"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["#!cookiecutter https://github.com/drivendata/cookiecutter-data-science"],"metadata":{"id":"WYxf13wPhS8c"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["!pip install wget"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"p8UiKdHNEqc5","executionInfo":{"status":"ok","timestamp":1649756015374,"user_tz":-120,"elapsed":5212,"user":{"displayName":"Tobías Chavarría","userId":"09737607649737780026"}},"outputId":"800a0cd9-8482-4af3-b695-1ab97acb5bf0"},"execution_count":2,"outputs":[{"output_type":"stream","name":"stdout","text":["Collecting wget\n","  Downloading wget-3.2.zip (10 kB)\n","Building wheels for collected packages: wget\n","  Building wheel for wget (setup.py) ... \u001b[?25l\u001b[?25hdone\n","  Created wheel for wget: filename=wget-3.2-py3-none-any.whl size=9675 sha256=517ff2552b662f46e008618ffd59248012de4ea68653f80c559f0895ffcf5abe\n","  Stored in directory: /root/.cache/pip/wheels/a1/b6/7c/0e63e34eb06634181c63adacca38b79ff8f35c37e3c13e3c02\n","Successfully built wget\n","Installing collected packages: wget\n","Successfully installed wget-3.2\n"]}]},{"cell_type":"markdown","source":["# Testing the src"],"metadata":{"id":"qsjhr95azAzu"}},{"cell_type":"markdown","source":["## Testing the model generator"],"metadata":{"id":"1pUCYg4C7li9"}},{"cell_type":"code","source":["#!cat src/models/train_model.py"],"metadata":{"id":"R6QVH3NnDG9q"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["!python3 src/models/train_model.py"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"LCQQ3JvfhWaH","executionInfo":{"status":"ok","timestamp":1649751673079,"user_tz":-120,"elapsed":6398,"user":{"displayName":"Tobías Chavarría","userId":"09737607649737780026"}},"outputId":"e923ef20-117f-48eb-8af1-d0b781260ec6"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["2022-04-12 08:21:13.407385: E tensorflow/stream_executor/cuda/cuda_driver.cc:271] failed call to cuInit: CUDA_ERROR_NO_DEVICE: no CUDA-capable device is detected\n","Creating the model ...\n","Model summary: \n","\n","Model: \"model\"\n","__________________________________________________________________________________________________\n"," Layer (type)                   Output Shape         Param #     Connected to                     \n","==================================================================================================\n"," input_1 (InputLayer)           [(None, 180, 180, 3  0           []                               \n","                                )]                                                                \n","                                                                                                  \n"," sequential (Sequential)        (None, 180, 180, 3)  0           ['input_1[0][0]']                \n","                                                                                                  \n"," rescaling (Rescaling)          (None, 180, 180, 3)  0           ['sequential[0][0]']             \n","                                                                                                  \n"," conv2d (Conv2D)                (None, 90, 90, 32)   896         ['rescaling[0][0]']              \n","                                                                                                  \n"," batch_normalization (BatchNorm  (None, 90, 90, 32)  128         ['conv2d[0][0]']                 \n"," alization)                                                                                       \n","                                                                                                  \n"," activation (Activation)        (None, 90, 90, 32)   0           ['batch_normalization[0][0]']    \n","                                                                                                  \n"," conv2d_1 (Conv2D)              (None, 90, 90, 64)   18496       ['activation[0][0]']             \n","                                                                                                  \n"," batch_normalization_1 (BatchNo  (None, 90, 90, 64)  256         ['conv2d_1[0][0]']               \n"," rmalization)                                                                                     \n","                                                                                                  \n"," activation_1 (Activation)      (None, 90, 90, 64)   0           ['batch_normalization_1[0][0]']  \n","                                                                                                  \n"," activation_2 (Activation)      (None, 90, 90, 64)   0           ['activation_1[0][0]']           \n","                                                                                                  \n"," separable_conv2d (SeparableCon  (None, 90, 90, 128)  8896       ['activation_2[0][0]']           \n"," v2D)                                                                                             \n","                                                                                                  \n"," batch_normalization_2 (BatchNo  (None, 90, 90, 128)  512        ['separable_conv2d[0][0]']       \n"," rmalization)                                                                                     \n","                                                                                                  \n"," activation_3 (Activation)      (None, 90, 90, 128)  0           ['batch_normalization_2[0][0]']  \n","                                                                                                  \n"," separable_conv2d_1 (SeparableC  (None, 90, 90, 128)  17664      ['activation_3[0][0]']           \n"," onv2D)                                                                                           \n","                                                                                                  \n"," batch_normalization_3 (BatchNo  (None, 90, 90, 128)  512        ['separable_conv2d_1[0][0]']     \n"," rmalization)                                                                                     \n","                                                                                                  \n"," max_pooling2d (MaxPooling2D)   (None, 45, 45, 128)  0           ['batch_normalization_3[0][0]']  \n","                                                                                                  \n"," conv2d_2 (Conv2D)              (None, 45, 45, 128)  8320        ['activation_1[0][0]']           \n","                                                                                                  \n"," add (Add)                      (None, 45, 45, 128)  0           ['max_pooling2d[0][0]',          \n","                                                                  'conv2d_2[0][0]']               \n","                                                                                                  \n"," activation_4 (Activation)      (None, 45, 45, 128)  0           ['add[0][0]']                    \n","                                                                                                  \n"," separable_conv2d_2 (SeparableC  (None, 45, 45, 256)  34176      ['activation_4[0][0]']           \n"," onv2D)                                                                                           \n","                                                                                                  \n"," batch_normalization_4 (BatchNo  (None, 45, 45, 256)  1024       ['separable_conv2d_2[0][0]']     \n"," rmalization)                                                                                     \n","                                                                                                  \n"," activation_5 (Activation)      (None, 45, 45, 256)  0           ['batch_normalization_4[0][0]']  \n","                                                                                                  \n"," separable_conv2d_3 (SeparableC  (None, 45, 45, 256)  68096      ['activation_5[0][0]']           \n"," onv2D)                                                                                           \n","                                                                                                  \n"," batch_normalization_5 (BatchNo  (None, 45, 45, 256)  1024       ['separable_conv2d_3[0][0]']     \n"," rmalization)                                                                                     \n","                                                                                                  \n"," max_pooling2d_1 (MaxPooling2D)  (None, 23, 23, 256)  0          ['batch_normalization_5[0][0]']  \n","                                                                                                  \n"," conv2d_3 (Conv2D)              (None, 23, 23, 256)  33024       ['add[0][0]']                    \n","                                                                                                  \n"," add_1 (Add)                    (None, 23, 23, 256)  0           ['max_pooling2d_1[0][0]',        \n","                                                                  'conv2d_3[0][0]']               \n","                                                                                                  \n"," activation_6 (Activation)      (None, 23, 23, 256)  0           ['add_1[0][0]']                  \n","                                                                                                  \n"," separable_conv2d_4 (SeparableC  (None, 23, 23, 512)  133888     ['activation_6[0][0]']           \n"," onv2D)                                                                                           \n","                                                                                                  \n"," batch_normalization_6 (BatchNo  (None, 23, 23, 512)  2048       ['separable_conv2d_4[0][0]']     \n"," rmalization)                                                                                     \n","                                                                                                  \n"," activation_7 (Activation)      (None, 23, 23, 512)  0           ['batch_normalization_6[0][0]']  \n","                                                                                                  \n"," separable_conv2d_5 (SeparableC  (None, 23, 23, 512)  267264     ['activation_7[0][0]']           \n"," onv2D)                                                                                           \n","                                                                                                  \n"," batch_normalization_7 (BatchNo  (None, 23, 23, 512)  2048       ['separable_conv2d_5[0][0]']     \n"," rmalization)                                                                                     \n","                                                                                                  \n"," max_pooling2d_2 (MaxPooling2D)  (None, 12, 12, 512)  0          ['batch_normalization_7[0][0]']  \n","                                                                                                  \n"," conv2d_4 (Conv2D)              (None, 12, 12, 512)  131584      ['add_1[0][0]']                  \n","                                                                                                  \n"," add_2 (Add)                    (None, 12, 12, 512)  0           ['max_pooling2d_2[0][0]',        \n","                                                                  'conv2d_4[0][0]']               \n","                                                                                                  \n"," activation_8 (Activation)      (None, 12, 12, 512)  0           ['add_2[0][0]']                  \n","                                                                                                  \n"," separable_conv2d_6 (SeparableC  (None, 12, 12, 728)  378072     ['activation_8[0][0]']           \n"," onv2D)                                                                                           \n","                                                                                                  \n"," batch_normalization_8 (BatchNo  (None, 12, 12, 728)  2912       ['separable_conv2d_6[0][0]']     \n"," rmalization)                                                                                     \n","                                                                                                  \n"," activation_9 (Activation)      (None, 12, 12, 728)  0           ['batch_normalization_8[0][0]']  \n","                                                                                                  \n"," separable_conv2d_7 (SeparableC  (None, 12, 12, 728)  537264     ['activation_9[0][0]']           \n"," onv2D)                                                                                           \n","                                                                                                  \n"," batch_normalization_9 (BatchNo  (None, 12, 12, 728)  2912       ['separable_conv2d_7[0][0]']     \n"," rmalization)                                                                                     \n","                                                                                                  \n"," max_pooling2d_3 (MaxPooling2D)  (None, 6, 6, 728)   0           ['batch_normalization_9[0][0]']  \n","                                                                                                  \n"," conv2d_5 (Conv2D)              (None, 6, 6, 728)    373464      ['add_2[0][0]']                  \n","                                                                                                  \n"," add_3 (Add)                    (None, 6, 6, 728)    0           ['max_pooling2d_3[0][0]',        \n","                                                                  'conv2d_5[0][0]']               \n","                                                                                                  \n"," separable_conv2d_8 (SeparableC  (None, 6, 6, 1024)  753048      ['add_3[0][0]']                  \n"," onv2D)                                                                                           \n","                                                                                                  \n"," batch_normalization_10 (BatchN  (None, 6, 6, 1024)  4096        ['separable_conv2d_8[0][0]']     \n"," ormalization)                                                                                    \n","                                                                                                  \n"," activation_10 (Activation)     (None, 6, 6, 1024)   0           ['batch_normalization_10[0][0]'] \n","                                                                                                  \n"," global_average_pooling2d (Glob  (None, 1024)        0           ['activation_10[0][0]']          \n"," alAveragePooling2D)                                                                              \n","                                                                                                  \n"," dropout (Dropout)              (None, 1024)         0           ['global_average_pooling2d[0][0]'\n","                                                                 ]                                \n","                                                                                                  \n"," dense (Dense)                  (None, 1)            1025        ['dropout[0][0]']                \n","                                                                                                  \n","==================================================================================================\n","Total params: 2,782,649\n","Trainable params: 2,773,913\n","Non-trainable params: 8,736\n","__________________________________________________________________________________________________\n","None\n","Done!\n"]}]},{"cell_type":"markdown","source":["## Loading the data"],"metadata":{"id":"P28C3Gn77YCM"}},{"cell_type":"code","source":["#!pip install wget glob2"],"metadata":{"id":"lBe24W3Y7hAm"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["!cat src/data/load_data.py"],"metadata":{"id":"lDVvbJt67dFG","executionInfo":{"status":"ok","timestamp":1649755609749,"user_tz":-120,"elapsed":1125,"user":{"displayName":"Tobías Chavarría","userId":"09737607649737780026"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"197041ed-4372-442a-dce9-126a1967ce66"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["# import the necessary packages\r\n","import tensorflow as tf\r\n","import wget\r\n","import glob2\r\n","import zipfile\r\n","import os\r\n","\r\n","# Personal modules\r\n","import src.config\r\n","\r\n","\r\n","class DataProcessor:\r\n","    \"\"\"\r\n","    Class for reading, processing and writing data from the\r\n","    s3 bucket.\r\n","    \"\"\"\r\n","\r\n","    def __init__(self, raw_directory, interim_directory, processed_directory):\r\n","        self.raw_directory = raw_directory\r\n","        self.interim_directory = interim_directory\r\n","        self.processed_directory = processed_directory\r\n","\r\n","    def get_data(self, remote_url):\r\n","        \"\"\"\r\n","        Downloads a file from a remote source src to a local destination dst.\r\n","        \"\"\"\r\n","        wget.download(remote_url, self.raw_directory)\r\n","\r\n","\r\n","    def unzip_data(self):\r\n","        \"\"\"\r\n","        Unpack zip files in the raw_directory\r\n","        \"\"\"\r\n","        \r\n","        self.filename = glob2.glob(f\"{self.raw_directory}/*.zip\")[0]\r\n","        print(self.filename)\r\n","        with zipfile.ZipFile(self.filename, \"r\") as zip_ref:\r\n","            zip_ref.extractall(path =self.processed_directory)\r\n","\r\n","    def clean_data(self):\r\n","        \"\"\"\r\n","        Clean processed data\r\n","        \"\"\"\r\n","        num_skipped = 0\r\n","        for folder_name in (\"PetImages/Cat\", \"PetImages/Dog\"):\r\n","            folder_path = os.path.join(self.processed_directory, folder_name)\r\n","            for fname in os.listdir(folder_path):\r\n","                fpath = os.path.join(folder_path, fname)\r\n","                try:\r\n","                    fobj = open(fpath, \"rb\")\r\n","                    is_jfif = tf.compat.as_bytes(\"JFIF\") in fobj.peek(10)\r\n","                finally:\r\n","                    fobj.close()\r\n","\r\n","                if not is_jfif:\r\n","                    num_skipped += 1\r\n","                    # Delete corrupted image\r\n","                    os.remove(fpath)\r\n","\r\n","        print(\"Deleted %d images\" % num_skipped)\r\n","\r\n","    def split_data(self, image_size, batch_size):\r\n","        train_ds = tf.keras.preprocessing.image_dataset_from_directory(\r\n","            self.processed_directory,\r\n","            validation_split=0.2,\r\n","            subset=\"training\",\r\n","            seed=1337,\r\n","            image_size=image_size,\r\n","            batch_size=batch_size,\r\n","        )\r\n","\r\n","        val_ds = tf.keras.preprocessing.image_dataset_from_directory(\r\n","            self.processed_directory,\r\n","            validation_split=0.2,\r\n","            subset=\"validation\",\r\n","            seed=1337,\r\n","            image_size=image_size,\r\n","            batch_size=batch_size,\r\n","        )\r\n","\r\n","        return train_ds, val_ds\r\n","\r\n","\r\n","if __name__ == \"__main__\":\r\n","    print(\"Creating DataProcessor object ...\")\r\n","    data_processor = DataProcessor(\r\n","        config.RAW_DIRECTORY, config.INTERIM_DIRECTORY, config.PROCESSED_DIRECTORY\r\n","    )\r\n","\r\n","    print(\"Downloading the data ...\")\r\n","    data_processor.get_data(config.REMOTE_URL)\r\n","\r\n","    print(\"Unzipping the data ...\")\r\n","    data_processor.unzip_data()\r\n","\r\n","    print(\"Cleanning the data ...\")\r\n","    data_processor.clean_data()\r\n","\r\n","    print(\"Splitting the data\")\r\n","    train_ds, val_ds = data_processor.split_data(config.IMAGE_SIZE, config.BATCH_SIZE)\r\n","\r\n","    print(\"Split information: \\n\")\r\n","    print(type(train_ds), type(val_ds))\r\n","\r\n","    print(\"Done!\")\r\n"]}]},{"cell_type":"code","source":["!python3 src/data/load_data.py"],"metadata":{"id":"PssltQXhmQQ5","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1649756211198,"user_tz":-120,"elapsed":4173,"user":{"displayName":"Tobías Chavarría","userId":"09737607649737780026"}},"outputId":"ae0b37e3-8b12-426e-d6a9-b8adaa2aabb9"},"execution_count":6,"outputs":[{"output_type":"stream","name":"stdout","text":["Traceback (most recent call last):\n","  File \"src/data/load_data.py\", line 9, in <module>\n","    import src.config\n","ModuleNotFoundError: No module named 'src'\n"]}]},{"cell_type":"markdown","source":["## Main file"],"metadata":{"id":"nqWfRw5kELKQ"}},{"cell_type":"code","source":["!cat src/config.py"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"bPlufOY6HKbt","executionInfo":{"status":"ok","timestamp":1649756029201,"user_tz":-120,"elapsed":638,"user":{"displayName":"Tobías Chavarría","userId":"09737607649737780026"}},"outputId":"cd7ac017-f2bf-4f1c-ee2f-a05ec0155973"},"execution_count":3,"outputs":[{"output_type":"stream","name":"stdout","text":["import os\r\n","\r\n","\r\n","# Path variables\r\n","BASE_PATH = \"/content/drive/MyDrive/colab_notebooks/AWS_project/cats_dogs_classifier/data\"\r\n","RAW_DIRECTORY = os.path.sep.join([BASE_PATH, \"raw\"])\r\n","INTERIM_DIRECTORY = os.path.sep.join([BASE_PATH, \"interim\"])\r\n","PROCESSED_DIRECTORY = os.path.sep.join([BASE_PATH, \"processed\"])\r\n","\r\n","REMOTE_URL = \"https://keras-training-code.s3.eu-west-1.amazonaws.com/kagglecatsanddogs_3367a.zip\"\r\n","\r\n","\r\n","# Model variables\r\n","IMAGE_SIZE = (180, 180)\r\n","BATCH_SIZE = 32\r\n"]}]},{"cell_type":"code","source":["!cat main.py"],"metadata":{"id":"vIHyKFH07XFJ","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1649756557956,"user_tz":-120,"elapsed":608,"user":{"displayName":"Tobías Chavarría","userId":"09737607649737780026"}},"outputId":"7558ef41-29d1-4f25-efa9-f58ee6f3df0c"},"execution_count":11,"outputs":[{"output_type":"stream","name":"stdout","text":["import src.data.load_data as data\r\n","import src.models.train_model as model_trainer\r\n","import src.config as config\r\n","\r\n","# 1. Download and unzip the data\r\n","\r\n","print(\"Creating DataProcessor object ...\")\r\n","data_processor = data.DataProcessor(\r\n","    config.RAW_DIRECTORY, config.INTERIM_DIRECTORY, config.PROCESSED_DIRECTORY\r\n",")\r\n","\r\n","print(\"Downloading the data ...\")\r\n","#data_processor.get_data(config.REMOTE_URL)\r\n","\r\n","\r\n","print(\"Unzipping the data ...\")\r\n","data_processor.unzip_data()\r\n","\r\n","print(\"Cleanning the data ...\")\r\n","data_processor.clean_data()\r\n","\r\n","print(\"Splitting the data\")\r\n","train_ds, val_ds = data_processor.split_data(config.IMAGE_SIZE, config.BATCH_SIZE)\r\n","\r\n","print(\"Split information: \\n\")\r\n","print(type(train_ds), type(val_ds))\r\n","\r\n","print(\"Done!\")\r\n","\r\n","# 2. Train and saving the model\r\n","\r\n","print(\"Creating the model ...\")\r\n","model = model_trainer.make_model(input_shape=config.IMAGE_SIZE + (3,), num_classes=2)\r\n","print(\"Model summary:\", \"\\n\")\r\n","print(model.summary())\r\n","print(\"Training and saving the model\")\r\n","model_trainer.train(model, train_ds, val_ds)\r\n","print(\"Done!\")\r\n"]}]},{"cell_type":"code","source":["!python3 main.py"],"metadata":{"id":"Ko2c7T5LEQo2","colab":{"base_uri":"https://localhost:8080/"},"outputId":"990a305f-a539-4d01-dd49-b3dc97d27d64"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["2022-04-12 09:42:59.113880: E tensorflow/stream_executor/cuda/cuda_driver.cc:271] failed call to cuInit: CUDA_ERROR_NO_DEVICE: no CUDA-capable device is detected\n","Creating DataProcessor object ...\n","Downloading the data ...\n","Unzipping the data ...\n","/content/drive/MyDrive/colab_notebooks/AWS_project/cats_dogs_classifier/data/raw/kagglecatsanddogs_3367a.zip\n"]}]}],"metadata":{"colab":{"collapsed_sections":[],"name":"01-image_classification_from_scratch","provenance":[{"file_id":"https://github.com/keras-team/keras-io/blob/master/examples/vision/ipynb/image_classification_from_scratch.ipynb","timestamp":1649670359829}]},"kernelspec":{"display_name":"Python 3","language":"python","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.7.0"},"accelerator":"GPU"},"nbformat":4,"nbformat_minor":0}